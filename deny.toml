# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
yanked = "warn"
ignore = [
    # https://rustsec.org/advisories/RUSTSEC-2024-0384 used by sse example
    "RUSTSEC-2024-0384",
    # https://rustsec.org/advisories/RUSTSEC-2024-0436 paste! is unmaintained
    "RUSTSEC-2024-0436",
    # https://rustsec.org/advisories/RUSTSEC-2025-0073 from alloy-dyn-abi 1.4.0
    "RUSTSEC-2025-0073",
]

# This section is considered when running `cargo deny check bans`.
# More documentation about the 'bans' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
highlight = "all"
# List of crates to deny
deny = [{ name = "openssl" }]
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    "base64",
    "bindgen",
    "bitflags",
    "cargo_metadata",
    "crossterm",
    "darling",
    "darling_core",
    "darling_macro",
    "dashmap",
    "fastrand",
    "foldhash",
    "getrandom",
    "hashbrown",
    "icu_collections",
    "icu_normalizer",
    "icu_normalizer_data",
    "icu_properties",
    "icu_properties_data",
    "icu_provider",
    "itertools",
    "linux-raw-sys",
    "litemap",
    "lru",
    "proptest-derive",
    "rand",
    "rand_chacha",
    "rand_core",
    "redox_users",
    "rustc-hash",
    "rustix",
    "secp256k1",
    "secp256k1-sys",
    "send_wrapper",
    "socket2",
    "strum",
    "strum_macros",
    "syn",
    "thiserror",
    "thiserror-impl",
    "tinystr",
    "toml_datetime",
    "toml_edit",
    "unicode-width",
    "wasi",
    "webpki-roots",
    "windows",
    "windows-core",
    "windows-implement",
    "windows-interface",
    "windows-link",
    "windows-result",
    "windows-strings",
    "windows-sys",
    "windows-targets",
    "windows_aarch64_gnullvm",
    "windows_aarch64_msvc",
    "windows_i686_gnu",
    "windows_i686_gnullvm",
    "windows_i686_msvc",
    "windows_x86_64_gnu",
    "windows_x86_64_gnullvm",
    "windows_x86_64_msvc",
    "writeable",
    "yoke",
    "yoke-derive",
    "zerovec",
    "zerovec-derive",
]
# Similarly to `skip` allows you to skip certain crates during duplicate
# detection. Unlike skip, it also includes the entire tree of transitive
# dependencies starting at the specified crate, up to a certain depth, which is
# by default infinite
skip-tree = []

[licenses]
version = 2
confidence-threshold = 0.8

# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.7 short identifier (+ optional exception)].
allow = [
    "MIT",
    "MIT-0",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "BSL-1.0",
    "0BSD",
    "CC0-1.0",
    "ISC",
    "Unlicense",
    "Unicode-3.0",
    "Zlib",
    # https://github.com/rustls/webpki/blob/main/LICENSE ISC Style
    "LicenseRef-rustls-webpki",
    "CDLA-Permissive-2.0",
    "MPL-2.0",
]

# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = []

[[licenses.clarify]]
name = "rustls-webpki"
expression = "LicenseRef-rustls-webpki"
license-files = [{ path = "LICENSE", hash = 0x001c7e6c }]

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is not
# in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "deny"
allow-git = []
